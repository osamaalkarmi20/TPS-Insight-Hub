// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPS_Insight_Hub;

#nullable disable

namespace TPS_Insight_Hub.Migrations
{
    [DbContext(typeof(HubDbContext))]
    partial class HubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "user",
                            ConcurrencyStamp = "00000000-0000-0000-0000-000000000000",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-id",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "user-1",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-2",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-3",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-4",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-5",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-6",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-7",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-8",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-9",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-10",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-11",
                            RoleId = "user"
                        },
                        new
                        {
                            UserId = "user-12",
                            RoleId = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LookUpDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentPositionId");

                    b.HasIndex("LookUpDepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92c7e7ac-2f84-4275-9966-1b5fc40af365",
                            DepartmentId = 1,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHh8o7tDK0PWZ5iiiFy0Uho5I9XJp8U2zRCLgfQxJTio2uHt0LnsU73o3zNLK50Pvg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18aa553f-c3ee-4c86-9509-e4b99f677068",
                            DepartmentId = 2,
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJHOBfCnA+idXap+osOkQu5pyjwKyOOOzkRhfOzyNP5z2IAoh04WynByVtejXar1Zw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcaaccec-4001-49f9-a125-3b7a581427a8",
                            DepartmentId = 3,
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMPG1A3kO7e8RzKA3lSIlJnjjRITdH5WSveyQ9fHbxqCvC1ChHtPZCquBtRKjBcFCw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "user-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65f79401-99a0-4366-8cfb-f7f4f1114e95",
                            DepartmentId = 4,
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEK17mzvOXob6AFyrjailojK9Q4114/lfFexDAoZjQiV8+dw5/fvpYDCBWV0PaFFDog==",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "user-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4d93093-13d3-4ccc-9874-fca600f48683",
                            DepartmentId = 5,
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIBhigjPVMZROfjNwP3Wslb2P/HJ3L+oLw+wq/iioGkxZsNgZZaBWkzncM6VWxlkQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "user-5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "054a3abb-b56e-4fa5-85fb-12cabd643204",
                            DepartmentId = 6,
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvxQ4IuQwcG/OuRp307o5aU/yl8SXOUMCJcSkzZ5LGHraURGVDExSfKrHcUTQFK4Q==",
                            PhoneNumberConfirmed = false,
                            PositionId = 6,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "user-6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ae63b12-9582-4e6e-a60c-3f120380a350",
                            DepartmentId = 7,
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEIq57SU7mFYjb6gh9GgIgfdaRrlXdxwPdIV1UbsY+utroaR4miXVp2CJzPAsBGVvtQ==",
                            PhoneNumberConfirmed = false,
                            PositionId = 7,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "user-7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60e706c0-30bf-4299-8315-9f3e228848c9",
                            DepartmentId = 8,
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEKcAva/ZKWiyMI/3q/lV0XpUKyvPYoPHw93fay5uBGW3MlAHtmwtre0ewAhdE6C45g==",
                            PhoneNumberConfirmed = false,
                            PositionId = 8,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "user-8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "929f6788-e339-4aa3-a772-15fa61e85cbd",
                            DepartmentId = 9,
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAENMXSqAjBwXXbIIPiAarZjeU9nmUOo9iRbilWjapKMKK2une/47T4RPTphEIj1RKoA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 9,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "user-9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4aef9526-9b9d-4ac2-ab0d-d898058a8ccb",
                            DepartmentId = 10,
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHs8WjZQLLIXteRxZJKZilEWNnYtZ3IJC1gWxOHKJwm2tSjDXF2Q794YZ2awPxLqw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 10,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "user-10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75ba2dbf-0bf8-4d18-a907-d672294a8949",
                            DepartmentId = 1,
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEHlWkGKnMVhnWsLzYrRvpPw4ulL+UpBvvIknP6+LmA+Qdb7YEQ9cl95inRAie/89Qw==",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "user-11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec1dc40d-1608-4808-a1de-cee234f8297e",
                            DepartmentId = 2,
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9aJ6j0xVfaA/QCJRU5RLFbhe0K7UsypZvQ/5xg6vXJIjKZeQ/hsfA3oep8pbdqJA==",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "user-12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfb97fe4-fcb1-4b3a-ba5a-776c41a71c05",
                            DepartmentId = 3,
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEGV1c2sffbVIu0lfIAnUkdLb55ByMbk18FQUj8+xmJeMVIY7gBwOqJPM8rEYZTb8Rg==",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        });
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.LookUpDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sales"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Support"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Testing"
                        });
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.LookUpPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Position = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            Position = "Developer"
                        },
                        new
                        {
                            Id = 3,
                            Position = "Designer"
                        },
                        new
                        {
                            Id = 4,
                            Position = "Tester"
                        },
                        new
                        {
                            Id = 5,
                            Position = "Support"
                        },
                        new
                        {
                            Id = 6,
                            Position = "HR"
                        },
                        new
                        {
                            Id = 7,
                            Position = "Sales"
                        },
                        new
                        {
                            Id = 8,
                            Position = "Marketing"
                        },
                        new
                        {
                            Id = 9,
                            Position = "Finance"
                        },
                        new
                        {
                            Id = 10,
                            Position = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TPS_Insight_Hub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TPS_Insight_Hub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TPS_Insight_Hub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TPS_Insight_Hub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.ApplicationUser", b =>
                {
                    b.HasOne("TPS_Insight_Hub.Models.LookUpPosition", "DepartmentPosition")
                        .WithMany()
                        .HasForeignKey("DepartmentPositionId");

                    b.HasOne("TPS_Insight_Hub.Models.LookUpDepartment", "LookUpDepartment")
                        .WithMany()
                        .HasForeignKey("LookUpDepartmentId");

                    b.Navigation("DepartmentPosition");

                    b.Navigation("LookUpDepartment");
                });

            modelBuilder.Entity("TPS_Insight_Hub.Models.Book", b =>
                {
                    b.HasOne("TPS_Insight_Hub.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
